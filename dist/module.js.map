{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./SeriesWrapper.ts","webpack:///./fft.ts","webpack:///./editor.ts","webpack:///./libLoader.ts","webpack:///../node_modules/scriptjs/dist/script.js","webpack:///./anno.ts"],"names":["installedModules","__webpack_require__","m","module","exports","__WEBPACK_EXTERNAL_MODULE__0__","_sdk","l","o","c","s","_SeriesWrapper","_editor","_libLoader","_anno","e","__esModule","default","i","Plotly","_super","PlotlyPanelCtrl","$inject","prototype","getCssRule","selectorText","styleSheets","document","idx","length","rules","cssRules","ruleIdx","rule","onResize","this","graphDiv","layout","doResize","onDataError","err","series","annotations","clear","render","onRefresh","otherPanelInFullscreenMode","initialized","redraw","onInitEditMode","_this","editor","EditorHelper","addEditorTab","onConfigChanged","setTimeout","console","log","processConfigMigration","configVersion","cfg","panel","pconfig","plot_bgcolor","paper_bgcolor","autosize","height","width","margin","scene","is3d","zaxis","settings","mode","old","show_1","markers","indexOf","lines","_lodash2","forEach","traces","trace","show","version","onPanelInitialized","_updateTraceData","getProcessedLayout","deepCopyWithTemplates","rect","getBoundingClientRect","xaxis","yaxis","fixScale","scaleanchor","r","t","b","pad","type","mapping","get","isDate","title","range","timeSrv","timeRange","from","valueOf","to","labelStyle","color","style","font","_jquery2","parse","scale","toString","gridcolor","yaxis2","onRender","options","showLink","displaylogo","displayModeBar","modeBarButtonsToRemove","shapes","concat","react","on","data","points","pointNumber","ts","msg","x","toPrecision","y","$rootScope","appEvent","dashboard","formatDate","_moment2","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","found","fullData","Math","utc","setTime","Plots","purge","innerHTML","onDataSnapshotLoad","snapshot","onDataReceived","dataList","finfo","seriesHash","useRefID_1","targets","sidx","refId","String","fromCharCode","charCodeAt","columns","push","SeriesWrapperTable","SeriesWrapperTableRow","target","SeriesWrapperSeries","error","seriesByKey","getAllKeys","k","set","hchanged","updateMappings","selectTrace","traceIndex","annotationPromise","Promise","resolve","showAnnotations","annotationsSrv","getAnnotations","then","results","hasAnno","update","_hadAnno","__addCopyPath","key","path","__set","dataWarnings","name","_updateTracesFromConfigs","cloneDeep","defaultTrace","is3D","map","tconfig","config","defaults","createTraceName","marker","sizemin","sizemode","sizeref","color_option","colorscale","showscale","line","text","z","substring","force","zero","v","vals","toArray","Array","loadIfNecessary","res","link","scope","elem","attrs","ctrl","find","evt","mouse","templateUrl","size","dash","shape","symbol","visible","loadFromCDN","showlegend","legend","orientation","dragmode","hovermode","family","showgrid","zeroline","rangemode","$scope","$injector","$window","uiSegmentSrv","call","AnnoInfo","Map","debounce","window","getComputedStyle","display","warn","obj","isArray","val","isString","templateSrv","replace","scopedVars","isObject","copy_1","defaultsDeep","a","events","loadPlotly","bind","refresh","SeriesWrapper","setFirst","first","isNumber","_typeof","getKey","__extends","value","arr","count","datapoints","df","floor","real","complex","_fft","fft","pow","table","rows","row","index","w","col","Error","newArrayOfZeros","n","result","Object","defineProperty","transform","imag","levels","cosTable","sinTable","cos","PI","sin","j","reverseBits","temp","halfsize","tablestep","tpre","tpim","bits","areal","aimag","breal","bimag","creal","cimag","xreal","ximag","yreal","yimag","outreal","outimag","slice","_module","REMOVE_KEY","defaultMappings","time","changed","onUpdateAxis","axis","label","property","segment","deepClone","newSegment","updateSegMapping","updateTrace","fake","opts","html","createTrace","removeCurrentTrace","splice","getSeriesSegs","withRemove","reject","onAxisSeriesChanged","getTextSegments","onTextMetricChanged","sss","seg","getColorSegments","onColorChanged","onSymbolChanged","getSymbolSegs","segs","loaded","wasCDN","isFull","_scriptjs2","needsFull","url","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","scriptpath","urlArgs","doc","head","getElementsByTagName","f","readyState","onreadystatechange","u","ids","delay","scripts","every","ar","fn","el","$script","paths","idOrDone","optDone","idOrDoneIsDone","done","id","join","queue","loopFn","item","list","callback","dset","split","each","test","loading","d","create","createElement","onload","onerror","async","src","insertBefore","lastChild","shift","p","str","ready","deps","req","missing","dep","assign","arguments","hasOwnProperty","apply","hoverinfo","annotation","iconColor","xref","yref","x0","y0","x1","y1","layer","fillcolor","opacity","getter","enumerable","Symbol","toStringTag","ns","object","moduleId","modules"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/* -*- Mode: typescript; indent-tabs-mode: nil; typescript-indent-level: 2 -*- */\n\n///<reference path=\"../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport $ from 'jquery';\n\nimport {\n  SeriesWrapper,\n  SeriesWrapperSeries,\n  SeriesWrapperTable,\n  SeriesWrapperTableRow,\n} from './SeriesWrapper';\nimport {EditorHelper} from './editor';\n\nimport {loadPlotly, loadIfNecessary} from './libLoader';\nimport {AnnoInfo} from './anno';\nimport {Axis} from 'plotly.js';\n\nlet Plotly: any; // Loaded dynamically!\n\nclass PlotlyPanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'partials/module.html';\n  static configVersion = 1; // An index to help config migration\n\n  initialized: boolean;\n  //$tooltip: any;\n\n  static defaultTrace = {\n    mapping: {\n      x: null,\n      y: null,\n      z: null,\n      text: null,\n      color: null,\n      size: null,\n    },\n    show: {\n      line: true,\n      markers: true,\n    },\n    settings: {\n      line: {\n        color: '#005f81',\n        width: 6,\n        dash: 'solid',\n        shape: 'linear',\n      },\n      marker: {\n        size: 15,\n        symbol: 'circle',\n        color: '#33B5E5',\n        colorscale: 'YlOrRd',\n        sizemode: 'diameter',\n        sizemin: 3,\n        sizeref: 0.2,\n        line: {\n          color: '#DDD',\n          width: 0,\n        },\n        showscale: false,\n      },\n      color_option: 'ramp',\n    },\n  };\n\n  static yaxis2: Partial<Axis> = {\n    title: 'Annotations',\n    type: 'linear',\n    range: [0, 1],\n    visible: false,\n  };\n\n  static defaults = {\n    pconfig: {\n      loadFromCDN: false,\n      showAnnotations: true,\n      fixScale: '',\n      traces: [PlotlyPanelCtrl.defaultTrace],\n      settings: {\n        type: 'scatter',\n        displayModeBar: false,\n      },\n      layout: {\n        showlegend: false,\n        legend: {\n          orientation: 'h',\n        },\n        dragmode: 'lasso', // (enumerated: \"zoom\" | \"pan\" | \"select\" | \"lasso\" | \"orbit\" | \"turntable\" )\n        hovermode: 'closest',\n        font: {\n          family: '\"Open Sans\", Helvetica, Arial, sans-serif',\n        },\n        xaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'auto',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n        },\n        yaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" ),\n        },\n        zaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n        },\n      },\n    },\n  };\n\n  graphDiv: any;\n  annotations = new AnnoInfo();\n  series: SeriesWrapper[];\n  seriesByKey: Map<string, SeriesWrapper> = new Map();\n  seriesHash = '?';\n\n  traces: any[]; // The data sent directly to Plotly -- with a special __copy element\n  layout: any; // The layout used by Plotly\n\n  mouse: any;\n  cfg: any;\n\n  // For editor\n  editor: EditorHelper;\n  dataWarnings: string[]; // warnings about loading data\n\n  /** @ngInject **/\n  constructor(\n    $scope,\n    $injector,\n    $window,\n    private $rootScope,\n    public uiSegmentSrv,\n    private annotationsSrv\n  ) {\n    super($scope, $injector);\n\n    this.initialized = false;\n\n    //this.$tooltip = $('<div id=\"tooltip\" class=\"graph-tooltip\">');\n\n    // defaults configs\n    _.defaultsDeep(this.panel, PlotlyPanelCtrl.defaults);\n\n    this.cfg = this.panel.pconfig;\n\n    this.traces = [];\n\n    // ?? This seems needed for tests?!!\n    if (!this.events) {\n      return;\n    }\n\n    loadPlotly(this.cfg).then(v => {\n      Plotly = v;\n      console.log('Plotly', v);\n\n      // Wait till plotly exists has loaded before we handle any data\n      this.events.on('render', this.onRender.bind(this));\n      this.events.on('data-received', this.onDataReceived.bind(this));\n      this.events.on('data-error', this.onDataError.bind(this));\n      this.events.on('panel-size-changed', this.onResize.bind(this));\n      this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n      this.events.on('refresh', this.onRefresh.bind(this));\n\n      // Refresh after plotly is loaded\n      this.refresh();\n    });\n\n    // Standard handlers\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitialized.bind(this));\n  }\n\n  getCssRule(selectorText): CSSStyleRule | null {\n    const styleSheets = document.styleSheets;\n    for (let idx = 0; idx < styleSheets.length; idx += 1) {\n      const styleSheet = styleSheets[idx] as CSSStyleSheet;\n      const rules = styleSheet.cssRules;\n      for (let ruleIdx = 0; ruleIdx < rules.length; ruleIdx += 1) {\n        const rule = rules[ruleIdx] as CSSStyleRule;\n        if (rule.selectorText === selectorText) {\n          return rule;\n        }\n      }\n    }\n    return null;\n  }\n\n  // Don't call resize too quickly\n  doResize = _.debounce(() => {\n    // https://github.com/alonho/angular-plotly/issues/26\n    const e = window.getComputedStyle(this.graphDiv).display;\n    if (!e || 'none' === e) {\n      // not drawn!\n      console.warn('resize a plot that is not drawn yet');\n    } else {\n      const rect = this.graphDiv.getBoundingClientRect();\n      this.layout.width = rect.width;\n      this.layout.height = this.height;\n      Plotly.redraw(this.graphDiv);\n    }\n  }, 50);\n\n  onResize() {\n    if (this.graphDiv && this.layout && Plotly) {\n      this.doResize(); // Debounced\n    }\n  }\n\n  onDataError(err) {\n    this.series = [];\n    this.annotations.clear();\n    this.render();\n  }\n\n  onRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    if (this.graphDiv && this.initialized && Plotly) {\n      Plotly.redraw(this.graphDiv);\n    }\n  }\n\n  onInitEditMode() {\n    this.editor = new EditorHelper(this);\n    this.addEditorTab('Display', 'public/plugins/natel-plotly-panel/partials/tab_display.html', 2);\n    this.addEditorTab('Traces', 'public/plugins/natel-plotly-panel/partials/tab_traces.html', 3);\n    //  this.editorTabIndex = 1;\n    this.onConfigChanged(); // Sets up the axis info\n\n    // Check the size in a little bit\n    setTimeout(() => {\n      console.log('RESIZE in editor');\n      this.onResize();\n    }, 500);\n  }\n\n  processConfigMigration() {\n    console.log('Migrating Plotly Configuration to version: ' + PlotlyPanelCtrl.configVersion);\n\n    // Remove some things that should not be saved\n    const cfg = this.panel.pconfig;\n    delete cfg.layout.plot_bgcolor;\n    delete cfg.layout.paper_bgcolor;\n    delete cfg.layout.autosize;\n    delete cfg.layout.height;\n    delete cfg.layout.width;\n    delete cfg.layout.margin;\n    delete cfg.layout.scene;\n    if (!this.is3d()) {\n      delete cfg.layout.zaxis;\n    }\n\n    // Move from 'markers-lines' to checkbox\n    if (cfg.settings.mode) {\n      const old = cfg.settings.mode;\n      const show = {\n        markers: old.indexOf('markers') >= 0,\n        lines: old.indexOf('lines') >= 0,\n      };\n      _.forEach(cfg.traces, trace => {\n        trace.show = show;\n      });\n      delete cfg.settings.mode;\n    }\n\n    // TODO... MORE Migrations\n    console.log('After Migration:', cfg);\n    this.cfg = cfg;\n    this.panel.version = PlotlyPanelCtrl.configVersion;\n  }\n\n  onPanelInitialized() {\n    if (!this.panel.version || PlotlyPanelCtrl.configVersion > this.panel.version) {\n      this.processConfigMigration();\n    }\n    this._updateTraceData(true);\n  }\n\n  deepCopyWithTemplates = obj => {\n    if (_.isArray(obj)) {\n      return obj.map(val => this.deepCopyWithTemplates(val));\n    } else if (_.isString(obj)) {\n      return this.templateSrv.replace(obj, this.panel.scopedVars);\n    } else if (_.isObject(obj)) {\n      const copy = {};\n      _.forEach(obj, (v, k) => {\n        copy[k] = this.deepCopyWithTemplates(v);\n      });\n      return copy;\n    }\n    return obj;\n  };\n\n  getProcessedLayout() {\n    // Copy from config\n    const layout = this.deepCopyWithTemplates(this.cfg.layout);\n    layout.plot_bgcolor = 'transparent';\n    layout.paper_bgcolor = layout.plot_bgcolor;\n\n    // Update the size\n    const rect = this.graphDiv.getBoundingClientRect();\n    layout.autosize = false; // height is from the div\n    layout.height = this.height;\n    layout.width = rect.width;\n\n    // Make sure it is something\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    // Fixed scales\n    if (this.cfg.fixScale) {\n      if ('x' === this.cfg.fixScale) {\n        layout.yaxis.scaleanchor = 'x';\n      } else if ('y' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'y';\n      } else if ('z' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'z';\n        layout.yaxis.scaleanchor = 'z';\n      }\n    }\n\n    if (this.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n\n      // 3d uses 'scene' for the axis\n      layout.scene = {\n        xaxis: layout.xaxis,\n        yaxis: layout.yaxis,\n        zaxis: layout.zaxis,\n      };\n\n      delete layout.xaxis;\n      delete layout.yaxis;\n      delete layout.zaxis;\n\n      layout.margin = {\n        l: 0,\n        r: 0,\n        t: 0,\n        b: 5,\n        pad: 0,\n      };\n    } else {\n      delete layout.zaxis;\n      delete layout.scene;\n\n      // Check if the X axis should be a date\n      if (!layout.xaxis.type || layout.xaxis.type === 'auto') {\n        const mapping = _.get(this.cfg, 'traces[0].mapping.x');\n        if (mapping && mapping.indexOf('time') >= 0) {\n          layout.xaxis.type = 'date';\n        }\n      }\n\n      const isDate = layout.xaxis.type === 'date';\n      layout.margin = {\n        l: layout.yaxis.title ? 50 : 35,\n        r: 5,\n        t: 0,\n        b: layout.xaxis.title ? 65 : isDate ? 40 : 30,\n        pad: 2,\n      };\n\n      // Set the range to the query window\n      if (isDate && !layout.xaxis.range) {\n        const range = this.timeSrv.timeRange();\n        layout.xaxis.range = [range.from.valueOf(), range.to.valueOf()];\n      }\n\n      // get the css rule of grafana graph axis text\n      const labelStyle = this.getCssRule('div.flot-text');\n      if (labelStyle) {\n        let color = labelStyle.style.color;\n        if (!layout.font) {\n          layout.font = {};\n        }\n        layout.font.color = color;\n\n        // make the grid a little more transparent\n        color = $.color\n          .parse(color)\n          .scale('a', 0.22)\n          .toString();\n\n        // set gridcolor (like grafana graph)\n        layout.xaxis.gridcolor = color;\n        layout.yaxis.gridcolor = color;\n      }\n\n      // Set the second axis\n      layout.yaxis2 = PlotlyPanelCtrl.yaxis2;\n    }\n    return layout;\n  }\n\n  onRender() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode() || !this.graphDiv) {\n      return;\n    }\n\n    if (!Plotly) {\n      return;\n    }\n\n    if (!this.initialized) {\n      const s = this.cfg.settings;\n\n      const options = {\n        showLink: false,\n        displaylogo: false,\n        displayModeBar: s.displayModeBar,\n        modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n      };\n\n      this.layout = this.getProcessedLayout();\n      this.layout.shapes = this.annotations.shapes;\n      let traces = this.traces;\n      if (this.annotations.shapes.length > 0) {\n        traces = this.traces.concat(this.annotations.trace);\n      }\n      Plotly.react(this.graphDiv, traces, this.layout, options);\n\n      this.graphDiv.on('plotly_click', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n        for (let i = 0; i < data.points.length; i++) {\n          const idx = data.points[i].pointNumber;\n          const ts = this.traces[0].ts[idx];\n          // console.log( 'CLICK!!!', ts, data );\n          const msg = data.points[i].x.toPrecision(4) + ', ' + data.points[i].y.toPrecision(4);\n          this.$rootScope.appEvent('alert-success', [\n            msg,\n            '@ ' + this.dashboard.formatDate(moment(ts)),\n          ]);\n        }\n      });\n\n      // if(true) {\n      //   this.graphDiv.on('plotly_hover', (data, xxx) => {\n      //     console.log( 'HOVER!!!', data, xxx, this.mouse );\n      //     if(data.points.length>0) {\n      //       var idx = 0;\n      //       var pt = data.points[idx];\n\n      //       var body = '<div class=\"graph-tooltip-time\">'+ pt.pointNumber +'</div>';\n      //       body += \"<center>\";\n      //       body += pt.x + ', '+pt.y;\n      //       body += \"</center>\";\n\n      //       //this.$tooltip.html( body ).place_tt( this.mouse.pageX + 10, this.mouse.pageY );\n      //     }\n      //   }).on('plotly_unhover', (data) => {\n      //     //this.$tooltip.detach();\n      //   });\n      // }\n\n      this.graphDiv.on('plotly_selected', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n\n        if (data.points.length === 0) {\n          console.log('Nothing Selected', data);\n          return;\n        }\n\n        console.log('SELECTED', data);\n\n        let min = Number.MAX_SAFE_INTEGER;\n        let max = Number.MIN_SAFE_INTEGER;\n\n        for (let i = 0; i < data.points.length; i++) {\n          const found = data.points[i];\n          const idx = found.pointNumber;\n          const ts = found.fullData.x[idx];\n          min = Math.min(min, ts);\n          max = Math.max(max, ts);\n        }\n\n        // At least 2 seconds\n        min -= 1000;\n        max += 1000;\n\n        const range = {from: moment.utc(min), to: moment.utc(max)};\n\n        console.log('SELECTED!!!', min, max, data.points.length, range);\n\n        this.timeSrv.setTime(range);\n\n        // rebuild the graph after query\n        if (this.graphDiv) {\n          Plotly.Plots.purge(this.graphDiv);\n          this.graphDiv.innerHTML = '';\n          this.initialized = false;\n        }\n      });\n      this.initialized = true;\n    } else if (this.initialized) {\n      Plotly.redraw(this.graphDiv);\n    } else {\n      console.log('Not initialized yet!');\n    }\n  }\n\n  onDataSnapshotLoad(snapshot) {\n    this.onDataReceived(snapshot);\n  }\n\n  _hadAnno = false;\n\n  onDataReceived(dataList) {\n    const finfo: SeriesWrapper[] = [];\n    let seriesHash = '/';\n    if (dataList && dataList.length > 0) {\n      const useRefID = dataList.length === this.panel.targets.length;\n      dataList.forEach((series, sidx) => {\n        let refId = '';\n        if (useRefID) {\n          refId = _.get(this.panel, 'targets[' + sidx + '].refId');\n          if (!refId) {\n            refId = String.fromCharCode('A'.charCodeAt(0) + sidx);\n          }\n        }\n        if (series.columns) {\n          for (let i = 0; i < series.columns.length; i++) {\n            finfo.push(new SeriesWrapperTable(refId, series, i));\n          }\n          finfo.push(new SeriesWrapperTableRow(refId, series));\n        } else if (series.target) {\n          finfo.push(new SeriesWrapperSeries(refId, series, 'value'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'time'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'index'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'freq'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'fft'));\n        } else {\n          console.error('Unsupported Series response', sidx, series);\n        }\n      });\n    }\n    this.seriesByKey.clear();\n    finfo.forEach(s => {\n      s.getAllKeys().forEach(k => {\n        this.seriesByKey.set(k, s);\n        seriesHash += '$' + k;\n      });\n    });\n    this.series = finfo;\n\n    // Now Process the loaded data\n    const hchanged = this.seriesHash !== seriesHash;\n    if (hchanged && this.editor) {\n      EditorHelper.updateMappings(this);\n      this.editor.selectTrace(this.editor.traceIndex);\n      this.editor.onConfigChanged();\n    }\n\n    if (hchanged || !this.initialized) {\n      this.onConfigChanged();\n      this.seriesHash = seriesHash;\n    }\n\n    // Support Annotations\n    let annotationPromise = Promise.resolve();\n    if (!this.cfg.showAnnotations || this.is3d()) {\n      this.annotations.clear();\n      if (this.layout) {\n        if (this.layout.shapes) {\n          this.onConfigChanged();\n        }\n        this.layout.shapes = [];\n      }\n    } else {\n      annotationPromise = this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(results => {\n          const hasAnno = this.annotations.update(results);\n          if (this.layout) {\n            if (hasAnno !== this._hadAnno) {\n              this.onConfigChanged();\n            }\n            this.layout.shapes = this.annotations.shapes;\n          }\n          this._hadAnno = hasAnno;\n        });\n    }\n\n    // Load the real data changes\n    annotationPromise.then(() => {\n      this._updateTraceData();\n      this.render();\n    });\n  }\n\n  __addCopyPath(trace: any, key: string, path: string) {\n    if (key) {\n      trace.__set.push({\n        key: key,\n        path: path,\n      });\n      const s: SeriesWrapper = this.seriesByKey.get(key);\n      if (!s) {\n        this.dataWarnings.push('Unable to find: ' + key + ' for ' + trace.name + ' // ' + path);\n      }\n    }\n  }\n\n  // This will update all trace settings *except* the data\n  _updateTracesFromConfigs() {\n    this.dataWarnings = [];\n\n    // Make sure we have a trace\n    if (this.cfg.traces == null || this.cfg.traces.length < 1) {\n      this.cfg.traces = [_.cloneDeep(PlotlyPanelCtrl.defaultTrace)];\n    }\n\n    const is3D = this.is3d();\n    this.traces = this.cfg.traces.map((tconfig, idx) => {\n      const config = this.deepCopyWithTemplates(tconfig) || {};\n      _.defaults(config, PlotlyPanelCtrl.defaults);\n      const mapping = config.mapping;\n\n      const trace: any = {\n        name: config.name || EditorHelper.createTraceName(idx),\n        type: this.cfg.settings.type,\n        mode: 'markers+lines', // really depends on config settings\n        __set: [], // { key:? property:? }\n      };\n\n      let mode = '';\n      if (config.show.markers) {\n        mode += '+markers';\n        trace.marker = config.settings.marker;\n\n        delete trace.marker.sizemin;\n        delete trace.marker.sizemode;\n        delete trace.marker.sizeref;\n\n        if (config.settings.color_option === 'ramp') {\n          this.__addCopyPath(trace, mapping.color, 'marker.color');\n        } else {\n          delete trace.marker.colorscale;\n          delete trace.marker.showscale;\n        }\n      }\n\n      if (config.show.lines) {\n        mode += '+lines';\n        trace.line = config.settings.line;\n      }\n\n      // Set the text\n      this.__addCopyPath(trace, mapping.text, 'text');\n      this.__addCopyPath(trace, mapping.x, 'x');\n      this.__addCopyPath(trace, mapping.y, 'y');\n\n      if (is3D) {\n        this.__addCopyPath(trace, mapping.z, 'z');\n      }\n\n      // Set the trace mode\n      if (mode) {\n        trace.mode = mode.substring(1);\n      }\n      return trace;\n    });\n  }\n\n  // Fills in the required data into the trace values\n  _updateTraceData(force = false): boolean {\n    if (!this.series) {\n      // console.log('NO Series data yet!');\n      return false;\n    }\n\n    if (force || !this.traces) {\n      this._updateTracesFromConfigs();\n    } else if (this.traces.length !== this.cfg.traces.length) {\n      console.log(\n        'trace number mismatch.  Found: ' +\n          this.traces.length +\n          ', expect: ' +\n          this.cfg.traces.length\n      );\n      this._updateTracesFromConfigs();\n    }\n\n    // Use zero when the metric value is missing\n    // Plotly gets lots of errors when the values are missing\n    let zero: any = [];\n    this.traces.forEach(trace => {\n      if (trace.__set) {\n        trace.__set.forEach(v => {\n          const s = this.seriesByKey.get(v.key);\n          let vals: any[] = zero;\n          if (s) {\n            vals = s.toArray();\n            if (vals && vals.length > zero.length) {\n              zero = Array.from(Array(3), () => 0);\n            }\n          } else {\n            if (!this.error) {\n              this.error = '';\n            }\n            this.error += 'Unable to find: ' + v.key + ' (using zeros).  ';\n          }\n          if (!vals) {\n            vals = zero;\n          }\n          _.set(trace, v.path, vals);\n        });\n      }\n    });\n\n    //console.log('SetDATA', this.traces);\n    return true;\n  }\n\n  onConfigChanged() {\n    // Force reloading the traces\n    this._updateTraceData(true);\n\n    if (!Plotly) {\n      return;\n    }\n\n    // Check if the plotly library changed\n    loadIfNecessary(this.cfg).then(res => {\n      if (res) {\n        if (Plotly) {\n          Plotly.purge(this.graphDiv);\n        }\n        Plotly = res;\n      }\n\n      // Updates the layout and redraw\n      if (this.initialized && this.graphDiv) {\n        if (!this.cfg.showAnnotations) {\n          this.annotations.clear();\n        }\n\n        const s = this.cfg.settings;\n        const options = {\n          showLink: false,\n          displaylogo: false,\n          displayModeBar: s.displayModeBar,\n          modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n        };\n        this.layout = this.getProcessedLayout();\n        this.layout.shapes = this.annotations.shapes;\n        let traces = this.traces;\n        if (this.annotations.shapes.length > 0) {\n          traces = this.traces.concat(this.annotations.trace);\n        }\n        console.log('ConfigChanged (traces)', traces);\n        Plotly.react(this.graphDiv, traces, this.layout, options);\n      }\n\n      this.render(); // does not query again!\n    });\n  }\n\n  is3d() {\n    return this.cfg.settings.type === 'scatter3d';\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.graphDiv = elem.find('.plotly-spot')[0];\n    this.initialized = false;\n    elem.on('mousemove', evt => {\n      this.mouse = evt;\n    });\n\n    //let p = $(this.graphDiv).parent().parent()[0];\n    //console.log( 'PLOT', this.graphDiv, p );\n  }\n}\n\nexport {PlotlyPanelCtrl, PlotlyPanelCtrl as PanelCtrl};\n","import _ from 'lodash';\nimport { fft } from './fft.ts'\n\n// This gives a standard way to get a value for a given field\nexport abstract class SeriesWrapper {\n  refId: string; // From Query Target\n  name: string;\n\n  type?: 'string' | 'date' | 'boolean' | 'epoch' | 'number';\n  first?: any;\n  count: number;\n\n  /** @ngInject */\n  constructor(refId: string) {\n    this.refId = refId;\n  }\n\n  protected setFirst(v: any) {\n    this.first = v;\n    if (_.isNumber(v)) {\n      this.type = 'number';\n    } else if (_.isString(v)) {\n      this.type = 'string';\n    } else if (typeof v === typeof true) {\n      this.type = 'boolean';\n    }\n  }\n\n  // The best key for this field\n  getKey(): string {\n    return this.name;\n  }\n\n  // All ways to access this field\n  getAllKeys(): string[] {\n    return [this.getKey()];\n  }\n\n  abstract toArray(): Array<string | number | boolean>;\n}\n\nexport class SeriesWrapperSeries extends SeriesWrapper {\n  value: 'value' | 'index' | 'time' | 'freq' | 'fft';\n\n  /** @ngInject */\n  constructor(refId: string, public series: any, val: 'value' | 'index' | 'time' | 'freq' | 'fft') {\n    super(refId);\n    this.value = val;\n    this.count = series.datapoints.length;\n    this.name = series.target;\n\n    if ('index' === val) {\n      this.first = 0;\n      this.type = 'number';\n      this.name += '@index';\n      return;\n    }\n    if ('value' === val) {\n      _.forEach(series.datapoints, arr => {\n        if (arr[0] !== null) {\n          // 0 is an ok value so cant use if(arr[0])\n          this.setFirst(arr[0]);\n          return false;\n        }\n        return true; // continue\n      });\n      return;\n    }\n    if ('time' === val) {\n      this.type = 'epoch';\n      this.first = series.datapoints[0][1];\n      this.name += '@time';\n      return;\n    }\n    if ('freq' === val) {\n      this.first = 0;\n      this.type = 'number';\n      this.name += '@freq';\n      return;\n    }\n    if ('fft' === val) {\n      this.first = 0;\n      this.type = 'number';\n      this.name += '@fft';\n      return;\n    }\n  }\n\n  toArray(): any[] {\n    if ('index' === this.value) {\n      const arr = new Array(this.count);\n      for (let i = 0; i < this.count; i++) {\n        arr[i] = i;\n      }\n      return arr;\n    }\n    if ('time' === this.value) {\n      return _.map(this.series.datapoints, arr => {\n        return arr[1];\n      });\n    }\n    if ('value' === this.value) {\n      return _.map(this.series.datapoints, arr => {\n        return arr[0];\n      });\n    }\n    if ('freq' === this.value) {\n      const arr = new Array(this.count);\n      const df = 1000.0/(this.series.datapoints[1][1]-this.series.datapoints[0][1])/this.count/2.0\n\n      for (let i = 0; i < this.count; i++) {\n        arr[i] = (-Math.floor(this.count/2)+i)*df;\n      }\n      return arr;\n    }\n    if ('fft' === this.value) {\n      let real = _.map(this.series.datapoints, arr => {\n        return arr[0];\n      });\n      let complex = _.map(this.series.datapoints, arr => {\n        return 0;\n      });\n      fft(real, complex);\n      const arr = new Array(this.count);\n\n      for (let i=0; i<this.count; i++) {\n        const idx = (i+Math.floor(this.count/2))%this.count;\n        arr[idx] = Math.pow(real[i],2) + Math.pow(complex[i],2)\n      }\n      return arr;\n    }\n    return [];\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      const vals = [this.name, this.refId + '@' + this.value, this.refId + '/' + this.name];\n\n      if ('A' === this.refId) {\n        vals.push('@' + this.value);\n      }\n      return vals;\n    }\n    return [this.name];\n  }\n}\n\nexport class SeriesWrapperTableRow extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any) {\n    super(refId);\n\n    this.name = refId + '@row';\n  }\n\n  toArray(): any[] {\n    const count = this.table.rows.length;\n    const arr = new Array(count);\n    for (let i = 0; i < count; i++) {\n      arr[i] = i;\n    }\n    return arr;\n  }\n}\n\nexport class SeriesWrapperTable extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any, public index: number) {\n    super(refId);\n    this.count = table.rows.length;\n\n    const col = table.columns[index];\n    if (!col) {\n      throw new Error('Unkonwn Column: ' + index);\n    }\n\n    this.name = col.text;\n    if ('time' === col.type) {\n      this.type = 'epoch';\n      this.first = table.rows[0][index];\n    } else {\n      for (let i = 0; i < this.count; i++) {\n        const v = table.rows[i][index];\n        if (v !== null) {\n          // 0 is an ok value so cant use if(v)\n          this.setFirst(v);\n          return;\n        }\n      }\n    }\n  }\n\n  toArray(): any[] {\n    return _.map(this.table.rows, row => {\n      return row[this.index];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      return [this.getKey(), this.refId + '/' + this.name, this.refId + '[' + this.index + ']'];\n    }\n    return [this.getKey()];\n  }\n}\n","/* \n * Free FFT and convolution (TypeScript)\n * \n * Copyright (c) 2018 Project Nayuki. (MIT License)\n * https://www.nayuki.io/page/free-small-fft-in-multiple-languages\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n * - The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n * - The Software is provided \"as is\", without warranty of any kind, express or\n *   implied, including but not limited to the warranties of merchantability,\n *   fitness for a particular purpose and noninfringement. In no event shall the\n *   authors or copyright holders be liable for any claim, damages or other\n *   liability, whether in an action of contract, tort or otherwise, arising from,\n *   out of or in connection with the Software or the use or other dealings in the\n *   Software.\n */\n\n\"use strict\";\n\n\n/* \n * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.\n * The vector can have any length. This is a wrapper function.\n */\nfunction transform(real: Array<number>|Float64Array, imag: Array<number>|Float64Array): void {\n  const n: number = real.length;\n  if (n != imag.length)\n    throw \"Mismatched lengths\";\n  if (n == 0)\n    return;\n  else if ((n & (n - 1)) == 0)  // Is power of 2\n    transformRadix2(real, imag);\n  else  // More complicated algorithm for arbitrary sizes\n    transformBluestein(real, imag);\n}\n\n\n/* \n * Computes the inverse discrete Fourier transform (IDFT) of the given complex vector, storing the result back into the vector.\n * The vector can have any length. This is a wrapper function. This transform does not perform scaling, so the inverse is not a true inverse.\n */\nfunction inverseTransform(real: Array<number>|Float64Array, imag: Array<number>|Float64Array): void {\n  transform(imag, real);\n}\n\n\n/* \n * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.\n * The vector's length must be a power of 2. Uses the Cooley-Tukey decimation-in-time radix-2 algorithm.\n */\nfunction transformRadix2(real: Array<number>|Float64Array, imag: Array<number>|Float64Array): void {\n  // Length variables\n  const n: number = real.length;\n  if (n != imag.length)\n    throw \"Mismatched lengths\";\n  if (n == 1)  // Trivial transform\n    return;\n  let levels: number = -1;\n  for (let i = 0; i < 32; i++) {\n    if (1 << i == n)\n      levels = i;  // Equal to log2(n)\n  }\n  if (levels == -1)\n    throw \"Length is not a power of 2\";\n  \n  // Trigonometric tables\n  let cosTable = new Array<number>(n / 2);\n  let sinTable = new Array<number>(n / 2);\n  for (let i = 0; i < n / 2; i++) {\n    cosTable[i] = Math.cos(2 * Math.PI * i / n);\n    sinTable[i] = Math.sin(2 * Math.PI * i / n);\n  }\n  \n  // Bit-reversed addressing permutation\n  for (let i = 0; i < n; i++) {\n    const j: number = reverseBits(i, levels);\n    if (j > i) {\n      let temp: number = real[i];\n      real[i] = real[j];\n      real[j] = temp;\n      temp = imag[i];\n      imag[i] = imag[j];\n      imag[j] = temp;\n    }\n  }\n  \n  // Cooley-Tukey decimation-in-time radix-2 FFT\n  for (let size = 2; size <= n; size *= 2) {\n    const halfsize: number = size / 2;\n    const tablestep: number = n / size;\n    for (let i = 0; i < n; i += size) {\n      for (let j = i, k = 0; j < i + halfsize; j++, k += tablestep) {\n\tconst l: number = j + halfsize;\n\tconst tpre: number =  real[l] * cosTable[k] + imag[l] * sinTable[k];\n\tconst tpim: number = -real[l] * sinTable[k] + imag[l] * cosTable[k];\n\treal[l] = real[j] - tpre;\n\timag[l] = imag[j] - tpim;\n\treal[j] += tpre;\n\timag[j] += tpim;\n      }\n    }\n  }\n  \n  // Returns the integer whose value is the reverse of the lowest 'bits' bits of the integer 'x'.\n  function reverseBits(x: number, bits: number): number {\n    let y: number = 0;\n    for (let i = 0; i < bits; i++) {\n      y = (y << 1) | (x & 1);\n      x >>>= 1;\n    }\n    return y;\n  }\n}\n\n\n/* \n * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.\n * The vector can have any length. This requires the convolution function, which in turn requires the radix-2 FFT function.\n * Uses Bluestein's chirp z-transform algorithm.\n */\nfunction transformBluestein(real: Array<number>|Float64Array, imag: Array<number>|Float64Array): void {\n  // Find a power-of-2 convolution length m such that m >= n * 2 + 1\n  const n: number = real.length;\n  if (n != imag.length)\n    throw \"Mismatched lengths\";\n  let m: number = 1;\n  while (m < n * 2 + 1)\n    m *= 2;\n  \n  // Trignometric tables\n  let cosTable = new Array<number>(n);\n  let sinTable = new Array<number>(n);\n  for (let i = 0; i < n; i++) {\n    const j: number = i * i % (n * 2);  // This is more accurate than j = i * i\n    cosTable[i] = Math.cos(Math.PI * j / n);\n    sinTable[i] = Math.sin(Math.PI * j / n);\n  }\n  \n  // Temporary vectors and preprocessing\n  let areal: Array<number> = newArrayOfZeros(m);\n  let aimag: Array<number> = newArrayOfZeros(m);\n  for (let i = 0; i < n; i++) {\n    areal[i] =  real[i] * cosTable[i] + imag[i] * sinTable[i];\n    aimag[i] = -real[i] * sinTable[i] + imag[i] * cosTable[i];\n  }\n  let breal: Array<number> = newArrayOfZeros(m);\n  let bimag: Array<number> = newArrayOfZeros(m);\n  breal[0] = cosTable[0];\n  bimag[0] = sinTable[0];\n  for (let i = 1; i < n; i++) {\n    breal[i] = breal[m - i] = cosTable[i];\n    bimag[i] = bimag[m - i] = sinTable[i];\n  }\n  \n  // Convolution\n  let creal = new Array<number>(m);\n  let cimag = new Array<number>(m);\n  convolveComplex(areal, aimag, breal, bimag, creal, cimag);\n  \n  // Postprocessing\n  for (let i = 0; i < n; i++) {\n    real[i] =  creal[i] * cosTable[i] + cimag[i] * sinTable[i];\n    imag[i] = -creal[i] * sinTable[i] + cimag[i] * cosTable[i];\n  }\n}\n\n\n/* \n * Computes the circular convolution of the given real vectors. Each vector's length must be the same.\n */\n// function convolveReal(x: Array<number>|Float64Array, y: Array<number>|Float64Array, out: Array<number>|Float64Array): void {\n// \tconst n: number = x.length;\n// \tif (n != y.length || n != out.length)\n// \t\tthrow \"Mismatched lengths\";\n// \tconvolveComplex(x, newArrayOfZeros(n), y, newArrayOfZeros(n), out, newArrayOfZeros(n));\n// }\n\n\n/* \n * Computes the circular convolution of the given complex vectors. Each vector's length must be the same.\n */\nfunction convolveComplex(\n  xreal: Array<number>|Float64Array, ximag: Array<number>|Float64Array,\n  yreal: Array<number>|Float64Array, yimag: Array<number>|Float64Array,\n  outreal: Array<number>|Float64Array, outimag: Array<number>|Float64Array): void {\n    \n    const n: number = xreal.length;\n    if (n != ximag.length || n != yreal.length || n != yimag.length\n\t|| n != outreal.length || n != outimag.length)\n      throw \"Mismatched lengths\";\n    \n    xreal = xreal.slice();\n    ximag = ximag.slice();\n    yreal = yreal.slice();\n    yimag = yimag.slice();\n    transform(xreal, ximag);\n    transform(yreal, yimag);\n    \n    for (let i = 0; i < n; i++) {\n      const temp: number = xreal[i] * yreal[i] - ximag[i] * yimag[i];\n      ximag[i] = ximag[i] * yreal[i] + xreal[i] * yimag[i];\n      xreal[i] = temp;\n    }\n    inverseTransform(xreal, ximag);\n    \n    for (let i = 0; i < n; i++) {  // Scaling (because this FFT implementation omits it)\n      outreal[i] = xreal[i] / n;\n      outimag[i] = ximag[i] / n;\n    }\n  }\n\n\nfunction newArrayOfZeros(n: number): Array<number> {\n  let result: Array<number> = [];\n  for (let i = 0; i < n; i++)\n    result.push(0);\n  return result;\n}\n\nexport {transform as fft}\n\n","import _ from 'lodash';\n\nimport {PlotlyPanelCtrl} from './module';\n\nclass AxisInfo {\n  label: string;\n  layout: any; // The config saved in layout\n  property: string; // mapping property to check in a trace\n  segment: any; // The Grafana <metric-segment\n}\n\nconst REMOVE_KEY = '-- remove --';\n\nexport class EditorHelper {\n  axis = new Array<AxisInfo>();\n  trace: any; // Trace Config\n  traceIndex = 0;\n  traces: any[]; // array of configs;\n\n  symbol: any; // The Grafana <metric-segment for this symbol\n  mapping: any = {}; // The Grafana <metric-segment for this symbol\n\n  /** @ngInject */\n  constructor(public ctrl: PlotlyPanelCtrl) {\n    EditorHelper.updateMappings(ctrl);\n    this.selectTrace(0);\n  }\n\n  // Callback when the query results changed\n  static updateMappings(ctrl: PlotlyPanelCtrl): boolean {\n    if (ctrl.series == null || ctrl.series.length < 1) {\n      return false;\n    }\n\n    const defaultMappings = {\n      first: ctrl.series[0].getKey(),\n      time: ctrl.series[1].getKey(),\n    };\n\n    let changed = false;\n    ctrl.cfg.traces.forEach(trace => {\n      _.defaults(trace, PlotlyPanelCtrl.defaultTrace);\n      const mapping = trace.mapping;\n      if (!mapping.color) {\n        mapping.color = defaultMappings.first;\n        changed = true;\n      }\n      if (!mapping.x) {\n        mapping.x = defaultMappings.time;\n        changed = true;\n      }\n      if (!mapping.y) {\n        mapping.y = defaultMappings.first;\n        changed = true;\n      }\n      if (ctrl.is3d() && !mapping.z) {\n        mapping.z = defaultMappings.first;\n        changed = true;\n      }\n    });\n    return changed;\n  }\n\n  onConfigChanged() {\n    this.onUpdateAxis(); // Every time????\n\n    // Initalize the axis\n    for (let i = 0; i < this.axis.length; i++) {\n      if (this.axis[i].layout.rangemode === 'between') {\n        if (!_.isArray(this.axis[i].layout.range)) {\n          this.axis[i].layout.range = [0, null];\n        }\n      } else {\n        delete this.axis[i].layout.range;\n      }\n    }\n\n    this.ctrl.onConfigChanged();\n  }\n\n  onUpdateAxis() {\n    const mapping = this.trace.mapping;\n    if (!mapping) {\n      console.error('Missing mappings for trace', this.trace);\n      return;\n    }\n\n    const layout = this.ctrl.cfg.layout;\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    this.axis = [];\n    this.axis.push({\n      label: 'X Axis',\n      layout: layout.xaxis,\n      property: 'x',\n      segment: this.mapping.x,\n    });\n    this.axis.push({\n      label: 'Y Axis',\n      layout: layout.yaxis,\n      property: 'y',\n      segment: this.mapping.y,\n    });\n\n    if (this.ctrl.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n      this.axis.push({\n        label: 'Z Axis',\n        layout: layout.zaxis,\n        property: 'z',\n        segment: this.mapping.z,\n      });\n    }\n  }\n\n  //-----------------------------------------------------------------------\n  // Manage Traces\n  //-----------------------------------------------------------------------\n\n  selectTrace(index: number) {\n    this.traces = this.ctrl.cfg.traces;\n    if (!this.traces || this.traces.length < 1) {\n      this.traces = this.ctrl.cfg.traces = [_.deepClone(PlotlyPanelCtrl.defaultTrace)];\n    }\n    if (index >= this.ctrl.cfg.traces.length) {\n      index = this.ctrl.cfg.traces.length - 1;\n    }\n    this.trace = this.ctrl.cfg.traces[index];\n    this.traceIndex = index;\n\n    _.defaults(this.trace, PlotlyPanelCtrl.defaultTrace);\n    if (!this.trace.name) {\n      this.trace.name = EditorHelper.createTraceName(index);\n    }\n\n    // The _defaults makes sure this is taken care of\n    this.symbol = this.ctrl.uiSegmentSrv.newSegment({\n      value: this.trace.settings.marker.symbol,\n    });\n\n    // Now set one for each key\n    this.mapping = {};\n    _.forEach(this.trace.mapping, (value, key) => {\n      this.updateSegMapping(value, key);\n    });\n\n    console.log('Editor Info', this);\n\n    this.onConfigChanged();\n    this.ctrl.refresh();\n  }\n\n  private updateSegMapping(value, key, updateTrace = false) {\n    if (REMOVE_KEY === value) {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n      value = null; // will set this value later\n    } else if (value) {\n      const s = this.ctrl.seriesByKey.get(value);\n      const opts: any = {\n        value: value,\n        series: s,\n      };\n      if (!s) {\n        //  opts.fake = true;\n        opts.html = value + '  <i class=\"fa fa-exclamation-triangle\"></i>';\n      }\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment(opts);\n    } else {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n    }\n\n    if (updateTrace) {\n      this.trace.mapping[key] = value;\n      console.log('SET', key, value, this.trace.mapping);\n    }\n  }\n\n  createTrace() {\n    let trace: any = {};\n    if (this.ctrl.cfg.traces.length > 0) {\n      trace = _.cloneDeep(this.ctrl.cfg.traces[this.ctrl.cfg.traces.length - 1]);\n    } else {\n      trace = _.deepClone(PlotlyPanelCtrl.defaultTrace);\n    }\n    trace.name = EditorHelper.createTraceName(this.ctrl.traces.length);\n    this.ctrl.cfg.traces.push(trace);\n    this.selectTrace(this.ctrl.cfg.traces.length - 1);\n  }\n\n  removeCurrentTrace() {\n    // TODO... better behavior\n    if (this.traces.length <= 1) {\n      console.error('Wont remove a single trace', this);\n      return;\n    }\n\n    for (let i = 0; i < this.traces.length; i++) {\n      if (this.trace === this.traces[i]) {\n        this.traces.splice(i, 1);\n        if (i >= this.traces.length) {\n          i = this.traces.length - 1;\n        }\n        this.ctrl.onConfigChanged();\n        this.ctrl._updateTraceData(true);\n        this.selectTrace(i);\n        this.ctrl.refresh();\n        return;\n      }\n    }\n\n    console.error('Could not find', this);\n  }\n\n  static createTraceName(idx: number) {\n    return 'Trace ' + (idx + 1);\n  }\n\n  //-----------------------------------------------------------------------\n  // SERIES\n  //-----------------------------------------------------------------------\n\n  getSeriesSegs(withRemove = false): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const series: any[] = [];\n\n      if (withRemove) {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            fake: true,\n            value: REMOVE_KEY,\n            series: null,\n          })\n        );\n      }\n      this.ctrl.series.forEach(s => {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            value: s.name,\n            series: s,\n          })\n        );\n      });\n\n      //console.log('GET Segments:', withRemove, series);\n      //console.log('ALL Series:', this.ctrl.series);\n      resolve(series);\n    });\n  }\n\n  onAxisSeriesChanged(axis: AxisInfo) {\n    this.updateSegMapping(axis.segment.value, axis.property, true);\n    this.onConfigChanged();\n  }\n\n  getTextSegments(): any[] {\n    return [this.mapping.text];\n  }\n\n  onTextMetricChanged(sss: any) {\n    const seg = this.mapping.text;\n    this.updateSegMapping(seg.value, 'text', true);\n    this.onConfigChanged();\n  }\n\n  getColorSegments(): any[] {\n    if (this.trace.settings.color_option === 'ramp') {\n      return [this.mapping.color];\n    }\n    return [];\n  }\n\n  onColorChanged() {\n    const seg = this.mapping.color;\n    this.updateSegMapping(seg.value, 'color', true);\n    this.onConfigChanged();\n  }\n\n  //-----------------------------------------------------------------------\n  // SYMBOLS\n  //-----------------------------------------------------------------------\n\n  onSymbolChanged() {\n    this.trace.settings.marker.symbol = this.symbol.value;\n    this.onConfigChanged();\n  }\n\n  getSymbolSegs(): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const txt = [\n        'circle',\n        'circle-open',\n        'circle-dot',\n        'circle-open-dot',\n        'square',\n        'square-open',\n        'square-dot',\n        'square-open-dot',\n        'diamond',\n        'diamond-open',\n        'diamond-dot',\n        'diamond-open-dot',\n        'cross',\n        'cross-open',\n        'cross-dot',\n        'cross-open-dot',\n        'x',\n        'x-open',\n        'x-dot',\n        'x-open-dot',\n        'triangle-up',\n        'triangle-up-open',\n        'triangle-up-dot',\n        'triangle-up-open-dot',\n        'triangle-down',\n        'triangle-down-open',\n        'triangle-down-dot',\n        'triangle-down-open-dot',\n        'triangle-left',\n        'triangle-left-open',\n        'triangle-left-dot',\n        'triangle-left-open-dot',\n        'triangle-right',\n        'triangle-right-open',\n        'triangle-right-dot',\n        'triangle-right-open-dot',\n        'triangle-ne',\n        'triangle-ne-open',\n        'triangle-ne-dot',\n        'triangle-ne-open-dot',\n        'triangle-se',\n        'triangle-se-open',\n        'triangle-se-dot',\n        'triangle-se-open-dot',\n        'triangle-sw',\n        'triangle-sw-open',\n        'triangle-sw-dot',\n        'triangle-sw-open-dot',\n        'triangle-nw',\n        'triangle-nw-open',\n        'triangle-nw-dot',\n        'triangle-nw-open-dot',\n        'pentagon',\n        'pentagon-open',\n        'pentagon-dot',\n        'pentagon-open-dot',\n        'hexagon',\n        'hexagon-open',\n        'hexagon-dot',\n        'hexagon-open-dot',\n        'hexagon2',\n        'hexagon2-open',\n        'hexagon2-dot',\n        'hexagon2-open-dot',\n        'octagon',\n        'octagon-open',\n        'octagon-dot',\n        'octagon-open-dot',\n        'star',\n        'star-open',\n        'star-dot',\n        'star-open-dot',\n        'hexagram',\n        'hexagram-open',\n        'hexagram-dot',\n        'hexagram-open-dot',\n        'star-triangle-up',\n        'star-triangle-up-open',\n        'star-triangle-up-dot',\n        'star-triangle-up-open-dot',\n        'star-triangle-down',\n        'star-triangle-down-open',\n        'star-triangle-down-dot',\n        'star-triangle-down-open-dot',\n        'star-square',\n        'star-square-open',\n        'star-square-dot',\n        'star-square-open-dot',\n        'star-diamond',\n        'star-diamond-open',\n        'star-diamond-dot',\n        'star-diamond-open-dot',\n        'diamond-tall',\n        'diamond-tall-open',\n        'diamond-tall-dot',\n        'diamond-tall-open-dot',\n        'diamond-wide',\n        'diamond-wide-open',\n        'diamond-wide-dot',\n        'diamond-wide-open-dot',\n        'hourglass',\n        'hourglass-open',\n        'bowtie',\n        'bowtie-open',\n        'circle-cross',\n        'circle-cross-open',\n        'circle-x',\n        'circle-x-open',\n        'square-cross',\n        'square-cross-open',\n        'square-x',\n        'square-x-open',\n        'diamond-cross',\n        'diamond-cross-open',\n        'diamond-x',\n        'diamond-x-open',\n        'cross-thin',\n        'cross-thin-open',\n        'x-thin',\n        'x-thin-open',\n        'asterisk',\n        'asterisk-open',\n        'hash',\n        'hash-open',\n        'hash-dot',\n        'hash-open-dot',\n        'y-up',\n        'y-up-open',\n        'y-down',\n        'y-down-open',\n        'y-left',\n        'y-left-open',\n        'y-right',\n        'y-right-open',\n        'line-ew',\n        'line-ew-open',\n        'line-ns',\n        'line-ns-open',\n        'line-ne',\n        'line-ne-open',\n        'line-nw',\n        'line-nw-open',\n      ];\n\n      const segs: any[] = [];\n      _.forEach(txt, val => {\n        segs.push(this.ctrl.uiSegmentSrv.newSegment(val));\n      });\n      resolve(segs);\n    });\n  }\n}\n","import $script from 'scriptjs';\n\nlet loaded: any; // Plotly Library\nlet isFull = false;\nlet wasCDN = false;\n\nexport function loadPlotly(cfg: any): Promise<any> {\n  if (loaded) {\n    console.log('using already loaded value');\n    return Promise.resolve(loaded);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  let url = 'public/plugins/natel-plotly-panel/lib/plotly-cartesian.min.js';\n  if (cfg.loadFromCDN) {\n    url = needsFull\n      ? 'https://cdn.plot.ly/plotly-latest.min.js'\n      : 'https://cdn.plot.ly/plotly-cartesian-latest.min.js';\n  } else if (needsFull) {\n    url = 'public/plugins/natel-plotly-panel/lib/plotly.min.js';\n  }\n  return new Promise((resolve, reject) => {\n    $script(url, resolve);\n  }).then(res => {\n    isFull = needsFull;\n    wasCDN = cfg.loadFromCDN;\n    loaded = window['Plotly'];\n    return loaded;\n  });\n}\n\nexport function loadIfNecessary(cfg: any): Promise<any> {\n  if (!loaded) {\n    return loadPlotly(cfg);\n  }\n\n  if (wasCDN !== cfg.loadFromCDN) {\n    console.log('Use CDN', cfg.loadFromCDN);\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  if (needsFull && !isFull) {\n    console.log('Switching to the full plotly library');\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  // No changes\n  return Promise.resolve(null);\n}\n","/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      fn(el)\n      return 1\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n","import {Shape, Data} from 'plotly.js';\n\nexport class AnnoInfo {\n  trace: Data;\n  shapes: Shape[];\n\n  constructor() {\n    this.clear();\n  }\n\n  clear() {\n    this.shapes = [];\n    this.trace = {\n      mode: 'markers',\n      type: 'scatter',\n      hoverinfo: 'x+text',\n      x: [],\n      y: [],\n      text: [],\n      yaxis: 'y2',\n      marker: {\n        size: 15,\n        symbol: 'triangle-up',\n        color: [],\n      },\n    };\n  }\n\n  update(results: any): boolean {\n    if (!results || !results.annotations) {\n      this.clear();\n      return false;\n    }\n\n    const x: number[] = [];\n    const y: number[] = [];\n    const text: string[] = [];\n    const color: string[] = [];\n\n    this.shapes = results.annotations.map(a => {\n      x.push(a.time);\n      y.push(0);\n      text.push('XXXX');\n      color.push(a.annotation.iconColor);\n\n      return {\n        type: 'line', // rect\n        xref: 'x',\n        yref: 'paper',\n        x0: a.time,\n        y0: 0,\n        x1: a.time,\n        y1: 1,\n\n        visible: true,\n        layer: 'above',\n\n        fillcolor: a.annotation.iconColor,\n        opacity: 0.8,\n        line: {\n          color: a.annotation.iconColor,\n          width: 1,\n          dash: 'dash',\n        },\n      } as Shape;\n    });\n\n    // Overwrite it with new points\n    this.trace = {...this.trace, x, y, text};\n    this.trace.marker!.color = color;\n    return x.length > 0;\n  }\n}\n"],"sourceRoot":""}